        -:    0:Source:/home/ben/CLionProjects/AdvancedCompEx1Task2/SimpleAnomalyDetector.cpp
        -:    0:Graph:/home/ben/CLionProjects/AdvancedCompEx1Task2/cmake-build-debug-coverage/CMakeFiles/Ex1Task2.dir/SimpleAnomalyDetector.cpp.gcno
        -:    0:Data:/home/ben/CLionProjects/AdvancedCompEx1Task2/cmake-build-debug-coverage/CMakeFiles/Ex1Task2.dir/SimpleAnomalyDetector.cpp.gcda
        -:    0:Runs:1
        -:    1:/* Authors:
        -:    2: * Ben Ganon - 318731007
        -:    3: * Sagiv Antebi - 318159282
        -:    4: */
        -:    5:
        -:    6:#include "SimpleAnomalyDetector.h"
        -:    7:#include "anomaly_detection_util.h"
        -:    8:/**
        -:    9: * simple constructor allocating memory to the cf array
        -:   10: */
function _ZN21SimpleAnomalyDetectorC2Ev called 100 returned 100% blocks executed 83%
      100:   11:SimpleAnomalyDetector::SimpleAnomalyDetector() {
      100:   11-block  0
call    0 returned 100
    $$$$$:   11-block  1
call    1 never executed
      100:   12:    this->cf = new std::vector<correlatedFeatures>;
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:   12-block  0
call    3 returned 100
        -:   13:
      100:   14:}
        -:   15:/**
        -:   16: * simple destructor to erase the cf array
        -:   17: */
     100*:   18:SimpleAnomalyDetector::~SimpleAnomalyDetector() {
      300:   19:    for (correlatedFeatures curr : *this->cf) {
      200:   20:        curr.feature1.clear();
      200:   21:        curr.feature2.clear();
        -:   22:
        -:   23:    }
      100:   24:    this->cf->clear();
      100:   25:    delete cf;
     100*:   26:}
------------------
_ZN21SimpleAnomalyDetectorD0Ev:
function _ZN21SimpleAnomalyDetectorD0Ev called 0 returned 0% blocks executed 0%
    #####:   18:SimpleAnomalyDetector::~SimpleAnomalyDetector() {
        -:   19:    for (correlatedFeatures curr : *this->cf) {
        -:   20:        curr.feature1.clear();
        -:   21:        curr.feature2.clear();
        -:   22:
        -:   23:    }
        -:   24:    this->cf->clear();
        -:   25:    delete cf;
    #####:   26:}
    %%%%%:   26-block  0
call    0 never executed
call    1 never executed
------------------
_ZN21SimpleAnomalyDetectorD2Ev:
function _ZN21SimpleAnomalyDetectorD2Ev called 100 returned 100% blocks executed 100%
      100:   18:SimpleAnomalyDetector::~SimpleAnomalyDetector() {
      100:   18-block  0
call    0 returned 100
      300:   19:    for (correlatedFeatures curr : *this->cf) {
      100:   19-block  0
call    0 returned 100
call    1 returned 100
      300:   19-block  1
call    2 returned 300
branch  3 taken 200 (fallthrough)
branch  4 taken 100
      200:   19-block  2
call    5 returned 200
call    6 returned 200
call    7 returned 200
call    8 returned 200
      200:   20:        curr.feature1.clear();
call    0 returned 200
      200:   21:        curr.feature2.clear();
call    0 returned 200
        -:   22:
        -:   23:    }
      100:   24:    this->cf->clear();
      100:   24-block  0
call    0 returned 100
      100:   25:    delete cf;
branch  0 taken 100 (fallthrough)
branch  1 taken 0
      100:   25-block  0
call    2 returned 100
call    3 returned 100
      100:   26:}
------------------
        -:   27:
        -:   28:/**
        -:   29: * learnNormal calculates correlated columns in the given timeseries vie pearson and fills up the cf array
        -:   30: * @param ts - timeseries with normal data for the detector to learn
        -:   31: */
function _ZN21SimpleAnomalyDetector11learnNormalERK10TimeSeries called 100 returned 100% blocks executed 63%
      100:   32:void SimpleAnomalyDetector::learnNormal(const TimeSeries &ts) {
        -:   33:    float m, p;
        -:   34:    int index;
        -:   35:    //iterating over the columns
      500:   36:    for (int i = 0; i < ts.numColumns(); i++) {
      100:   36-block  0
      500:   36-block  1
call    0 returned 500
branch  1 taken 400 (fallthrough)
branch  2 taken 100
      400:   36-block  2
        -:   37:        //current max pearson coefficient
      400:   38:        m = 0;
        -:   39:        //current index of the coefficient column
      400:   40:        index = -1;
        -:   41:        //iterating over the rest of the columns
     1000:   42:        for (int j = i + 1; j < ts.numColumns(); j++) {
      400:   42-block  0
     1000:   42-block  1
call    0 returned 1000
branch  1 taken 600 (fallthrough)
branch  2 taken 400
      600:   42-block  2
        -:   43:            //calculating pearson of i and j
      600:   44:            p = pearson(ts.getColumn(i).data(), ts.getColumn(j).data(), ts.getColumn(i).size());
      600:   44-block  0
call    0 returned 600
call    1 returned 600
call    2 returned 600
branch  3 taken 600 (fallthrough)
branch  4 taken 0 (throw)
      600:   44-block  1
call    5 returned 600
call    6 returned 600
branch  7 taken 600 (fallthrough)
branch  8 taken 0 (throw)
      600:   44-block  2
call    9 returned 600
call   10 returned 600
branch 11 taken 600 (fallthrough)
branch 12 taken 0 (throw)
      600:   44-block  3
call   13 returned 600
call   14 returned 600
call   15 returned 600
    $$$$$:   44-block  4
call   16 never executed
    $$$$$:   44-block  5
    $$$$$:   44-block  6
call   17 never executed
    $$$$$:   44-block  7
    $$$$$:   44-block  8
call   18 never executed
    $$$$$:   44-block  9
call   19 never executed
      600:   45:            if (p > m) {
branch  0 taken 500 (fallthrough)
branch  1 taken 100
      500:   46:                m = p;
      500:   47:                index = j;
      500:   47-block  0
        -:   48:            }
        -:   49:        }
        -:   50:        //if we found any correlation above the given pearson threshhold (PEARSON) we enter the columns into cf
      400:   51:        if (-1 != index) {
      400:   51-block  0
branch  0 taken 300 (fallthrough)
branch  1 taken 100
      300:   52:            if (m >= PEARSON) {
      300:   52-block  0
branch  0 taken 200 (fallthrough)
branch  1 taken 100
        -:   53:                //remember delete this
      400:   54:                correlatedFeatures correlatedFeature;
      200:   54-block  0
call    0 returned 200
      200:   54-block  1
call    1 returned 200
    $$$$$:   54-block  2
call    2 never executed
      200:   55:                correlatedFeature.corrlation = m;
        -:   56:                //need to change the function operation in timeSeries - need to return std::vector with floats
      200:   57:                correlatedFeature.feature1 = ts.getNameOfRaw(i);
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:   57-block  0
call    3 returned 200
call    4 returned 200
      200:   58:                correlatedFeature.feature2 = ts.getNameOfRaw(index);
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:   58-block  0
call    3 returned 200
call    4 returned 200
      200:   59:                correlatedFeature.col1 = i;
      200:   60:                correlatedFeature.col2 = index;
        -:   61:                //need to add to those two:
      200:   62:                correlatedFeature.lin_reg = linear_reg(ts.getColumn(i), ts.getColumn(index), ts.getColumn(i).size());
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:   62-block  0
call    3 returned 200
call    4 returned 200
branch  5 taken 200 (fallthrough)
branch  6 taken 0 (throw)
      200:   62-block  1
call    7 returned 200
branch  8 taken 200 (fallthrough)
branch  9 taken 0 (throw)
      200:   62-block  2
call   10 returned 200
branch 11 taken 200 (fallthrough)
branch 12 taken 0 (throw)
      200:   62-block  3
call   13 returned 200
call   14 returned 200
call   15 returned 200
    $$$$$:   62-block  4
call   16 never executed
    $$$$$:   62-block  5
    $$$$$:   62-block  6
call   17 never executed
    $$$$$:   62-block  7
    $$$$$:   62-block  8
call   18 never executed
    $$$$$:   62-block  9
      400:   63:                correlatedFeature.threshold = maxDev(ts.getColumn(i), ts.getColumn(index), ts.getColumn(i).size(),
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:   63-block  0
call    3 returned 200
call    4 returned 200
branch  5 taken 200 (fallthrough)
branch  6 taken 0 (throw)
      200:   63-block  1
call    7 returned 200
branch  8 taken 200 (fallthrough)
branch  9 taken 0 (throw)
      200:   63-block  2
call   10 returned 200
branch 11 taken 200 (fallthrough)
branch 12 taken 0 (throw)
call   13 returned 200
call   14 returned 200
    $$$$$:   63-block  3
call   15 never executed
    $$$$$:   63-block  4
    $$$$$:   63-block  5
call   16 never executed
    $$$$$:   63-block  6
    $$$$$:   63-block  7
call   17 never executed
    $$$$$:   63-block  8
      200:   64:                                                      correlatedFeature.lin_reg) * THRESHOLD;
      200:   64-block  0
call    0 returned 200
      200:   65:                cf->push_back(correlatedFeature);
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
        -:   66:            }
        -:   67:        }
        -:   68:
        -:   69:    }
      100:   70:}
      100:   70-block  0
        -:   71:
        -:   72:/**
        -:   73: * detect iterates over the correlatedd features created in learnNormal,
        -:   74: * then measures each point's distance from the linear regression line of the two cf's,
        -:   75: * if a point is farther away than the threshold, detect adds an anomaly report to the std::vector,
        -:   76: * then returns the std::vector.
        -:   77: * @param ts - the desired timeseries to find anomalies in
        -:   78: * @return
        -:   79: */
function _ZN21SimpleAnomalyDetector6detectERK10TimeSeries called 100 returned 100% blocks executed 66%
      100:   80:std::vector<AnomalyReport> SimpleAnomalyDetector::detect(const TimeSeries &ts) {
      100:   81:    std::vector<AnomalyReport> anomalies;
      100:   81-block  0
call    0 returned 100
        -:   82:    //iteration over cf's
      300:   83:    for (correlatedFeatures currCf: *cf) {
call    0 returned 100
call    1 returned 100
      300:   83-block  0
call    2 returned 300
branch  3 taken 200 (fallthrough)
branch  4 taken 100
      200:   83-block  1
call    5 returned 200
call    6 returned 200
branch  7 taken 200 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 200
call   10 returned 200
    $$$$$:   83-block  2
call   11 never executed
        -:   84:        //the two columns from the timeseries
      400:   85:        std::vector<float> col1 = ts.getColumn(currCf.col1);
      200:   85-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 200
    $$$$$:   85-block  1
call    4 never executed
      400:   86:        std::vector<float> col2 = ts.getColumn(currCf.col2);
      200:   86-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:   86-block  1
call    3 returned 200
    $$$$$:   86-block  2
call    4 never executed
        -:   87:        //iterating over each line in the columns
    20200:   88:        for (int i = 0; i < col1.size(); i++) {
      200:   88-block  0
    20200:   88-block  1
call    0 returned 20200
branch  1 taken 20000 (fallthrough)
branch  2 taken 200
    20000:   88-block  2
    20000:   89:            Point *currP = new Point(col1.at(i), col2.at(i));
    20000:   89-block  0
call    0 returned 20000
branch  1 taken 20000 (fallthrough)
branch  2 taken 0 (throw)
    20000:   89-block  1
call    3 returned 20000
branch  4 taken 20000 (fallthrough)
branch  5 taken 0 (throw)
    20000:   89-block  2
call    6 returned 20000
branch  7 taken 20000 (fallthrough)
branch  8 taken 0 (throw)
    20000:   89-block  3
call    9 returned 20000
        -:   90:            //checking if the point is too far away from lin_reg
    20000:   91:            if (dev(*currP, currCf.lin_reg) > currCf.threshold) {
call    0 returned 20000
branch  1 taken 20000 (fallthrough)
branch  2 taken 0 (throw)
    20000:   91-block  0
branch  3 taken 100 (fallthrough)
branch  4 taken 19900
        -:   92:                //creating a new anomaly report
      200:   93:                std::string desc = currCf.feature1 + "-" + currCf.feature2;
      100:   93-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:   93-block  1
call    3 returned 100
branch  4 taken 100 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 100
    $$$$$:   93-block  2
    $$$$$:   93-block  3
call    7 never executed
      200:   94:                AnomalyReport anom = AnomalyReport(desc, i + 1);
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:   94-block  0
call    3 returned 100
branch  4 taken 100 (fallthrough)
branch  5 taken 0 (throw)
      100:   94-block  1
call    6 returned 100
    $$$$$:   94-block  2
    $$$$$:   94-block  3
call    7 never executed
      100:   95:                anomalies.push_back(anom);
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
        -:   96:            }
    20000:   97:            delete currP;
    20000:   97-block  0
branch  0 taken 20000 (fallthrough)
branch  1 taken 0
    20000:   97-block  1
call    2 returned 20000
        -:   98:        }
        -:   99:    }
      100:  100:    return anomalies;
      100:  100-block  0
      100:  100-block  1
        -:  101:}
        -:  102:
        -:  103:/**
        -:  104: * adds a new correlated feature to the anomaly detector.
        -:  105: * @param features1
        -:  106: */
function _ZN21SimpleAnomalyDetector5addCfE18correlatedFeatures called 0 returned 0% blocks executed 0%
    #####:  107:void SimpleAnomalyDetector::addCf(correlatedFeatures features1) {
    #####:  108:    this->cf->push_back(features1);
    %%%%%:  108-block  0
call    0 never executed
    #####:  109:}
        -:  110:
        -:  111:/**
        -:  112: * returns the correlated feature array
        -:  113: * @return
        -:  114: */
function _ZN21SimpleAnomalyDetector14getNormalModelEv called 100 returned 100% blocks executed 100%
      100:  115:std::vector<correlatedFeatures> SimpleAnomalyDetector::getNormalModel() {
      100:  116:    return *this->cf;
      100:  116-block  0
call    0 returned 100
        -:  117:}
        -:  118:
        -:  119:/**
        -:  120: * calculates the maximum deviation from the linear regression of two given data sets
        -:  121: * @param std::vector1 - data set 1
        -:  122: * @param std::vector2 - data set 2
        -:  123: * @param size - size of the arrays
        -:  124: * @param l - line to calculate deviation from
        -:  125: * @return
        -:  126: */
function _ZN21SimpleAnomalyDetector6maxDevESt6vectorIfSaIfEES2_j4Line called 200 returned 100% blocks executed 100%
      200:  127:float SimpleAnomalyDetector::maxDev(std::vector<float> vector1, std::vector<float> vector2, unsigned int size, Line l) {
        -:  128:    float tempMax;
      200:  129:    float maxNum = 0;
    20200:  130:    for (int i = 0; i < size; ++i) {
      200:  130-block  0
    20200:  130-block  1
branch  0 taken 20000 (fallthrough)
branch  1 taken 200
    20000:  130-block  2
        -:  131:        //the maximum distance from the line
    20000:  132:        tempMax = dev(Point(vector1.at(i), vector2.at(i)), l);
    20000:  132-block  0
call    0 returned 20000
call    1 returned 20000
call    2 returned 20000
call    3 returned 20000
branch  4 taken 20000 (fallthrough)
branch  5 taken 0 (throw)
    20000:  133:        if (maxNum < tempMax) {
    20000:  133-block  0
branch  0 taken 900 (fallthrough)
branch  1 taken 19100
      900:  134:            maxNum = tempMax;
      900:  134-block  0
        -:  135:        }
        -:  136:    }
      200:  137:    return maxNum;
      200:  137-block  0
      200:  137-block  1
        -:  138:}
